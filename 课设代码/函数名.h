#pragma once
#include <iostream>
#include <stdio.h>
#include <vector>
#include "符号表结构.h"


/*********************************************       语法分析部分       *************************************************/

//语法分析测试函数
void int_it();

//初始化now_Token，使now_Token指向第一个token
int int_token();

//now_Token指向下一个token
void readToken();

//程序开始
void run();

//<源程序>→<开始>
int Source();

//<开始>→<数据类型><主函数>|<数据类型><外部定义>
int begin();

//<主函数>→main ( ) {<复合语句>}
int main_function();

//<外部定义>→<函数头>;<开始>|<函数头>{<复合语句>}<开始>
int External();

//<函数头>→<标识符>(<形参>)
int function_header();

//<形参>→<数据类型><标识符>|<数据类型><标识符>,<形参>
int Formal();

//<复合语句>→<变量声明><复合语句> | <赋值、函数调用语句><复合语句> | <选择语句><复合语句> | <循环语句><复合语句> | <返回语句><复合语句> | ε
int Compound();

//<变量声明>→<数据类型><标识符>；|<数据类型><标识符>，<标识符列表>；|<数据类型><标识符><数组列表>;
int Variable();

//<标识符列表>→<标识符> | <标识符>,<标识符列表>
int dentifier();

//<数组列表>→[<算术表达式>] | ，<标识符>[<算术表达式>]<数组列表1>
int Array();

//<选择语句>→if(<表达式>){<复合语句>}【else(<表达式>){<复合语句>}】
int Select();

//<循环语句>→while(<表达式>){<复合语句>}
int Cycle();

//<返回语句>→return<标识符>;|return<整型常量>;
int Back();

//<赋值、函数调用语句>→ < 标识符 >= <表达式>； | < 标识符 >= <标识符>(<实参>); | <标识符>(<实参>);
int Call_and_Assignment();

//<实参>→<标识符>|<标识符>,<实参>
int Actual();

//<表达式>→<算术表达式>|<逻辑表达式>|<字符常量>|<字符串常量>
int Expression();

//<算数表达式>→ <T> 【W1 <T>】
int Arithmetic_Expression();

//<T>→<F> 【W2 <F>】
int T();

//<F>→(<算术表达式>)|<标识符> |<整数>|<实数>
int F();

//逻辑表达式
int Logic_Expression();

/*********************************************       语法分析部分       *************************************************/
